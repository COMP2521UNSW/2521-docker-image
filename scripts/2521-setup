#!/bin/bash
# Docker setup script
#
# This sets up the 2521 docker image, and sets up an SSH connection to CSE
# as well as adding the scripts in this directory to the user's $PATH, by
# appending to their .zshrc and .bashrc
#
# Author: Maddy Guthridge


# Ensure environment contains required programs, and exit early if not
check-env() {
    echo "[2521-setup]  Checking all required dependencies are installed..."
    # Docker
    if ! command -v docker > /dev/null; then
        echo "[2521-setup]  Error: Docker is not installed"
        echo "[2521-setup]  Please install Docker Desktop by following the instrctions"
        echo "[2521-setup]  on this site: https://docs.docker.com/get-docker/"
        exit 1
    fi

    # TODO: Make sure this user is in the docker group, so that they can run
    # docker commands without sudo on Linux
    # TODO: Is this needed on MacOS?
}


# Build docker image
docker-setup() {
    ./scripts/2521-build
}

# Set up VS Code so it can work nicely with the image
code-setup() {
    code_path=$(which code 2> /dev/null)
    if [[ -n $code_path ]]; then
        echo "[2521-setup]  Setting up VS Code..."
        # Install dev containers extension
        code --install-extension "ms-vscode-remote.remote-containers"
        # Doesn't seem possible to easily set up extensions from outside of the
        # container, so we'll leave this up to the students
        # If you can get it working, please create a PR
    else
        echo "[2521-setup]  Warning: VS Code not found in path. Not setting up."
    fi
}

# On Windows, the SSH agent isn't started in Git Bash by default, meaning that
# Docker builds don't seem to work properly.
# Append `fix-ssh-agent` to the .bashrc if there is no SSH agent already
windows-fix-ssh-agent() {
    # Only Windows
    if [[ "$OSTYPE" == "msys" ]]; then
        if [[ -z "${SSH_AUTH_SOCK}" ]]; then
            # SSH auth socket not set up
            # Copy extras/fix-ssh-agent into bashrc
            cat ./extras/fix-ssh-agent >> ~/.bashrc
            echo "[2521-setup]  Fixed SSH agent set up, please restart your terminal"
            exit 1
        fi
    fi
}

# Check for an existing SSH key, if there isn't one, make one
ssh-key-setup() {
    echo "[2521-setup]  Checking for SSH keys..."
    available_keys="$(ls -l ~/.ssh/id_*.pub)"

    if [ ! -n available_keys ]; then
        echo "[2521-setup]  No SSH keys found, creating one..."

        # Generate SSH key
        # https://stackoverflow.com/a/43235320/6335363
        # -q = quiet
        # -t ed25519 = ed25519 key
        # -f "~/.ssh/id_ed25519" = key output file
        # -N "" = no password
        # -C "COMP2521 Docker -> CSE" = comment
        ssh-keygen -q -t ed25519 -f ~/.ssh/id_ed25519 -N ""
    fi
}

# Set up access to CSE systems over SSH
#
# - Set up zID
# - Set up SSH key
# - Uses ssh-copy-id to copy it to CSE systems
cse-setup () {
    echo "[2521-setup]  Setting up connection to CSE..."
    windows-fix-ssh-agent

    # Get their zID, and save it to `config/zid`
    if [[ ! -f "./home/.zid" ]]; then
        read -p "Enter your zID: " zid
        echo "$zid" > "./home/.zid"
    else
        zid=$(cat "./home/.zid")
    fi

    # Set up an SSH key if needed
    ssh-key-setup

    # Now copy it across to CSE
    echo "[2521-setup]  Copying SSH key to CSE..."
    ssh-copy-id "$zid@login.cse.unsw.edu.au"

    # Finally, link their SSH config to `config/ssh` so it can be used
    # within the docker image
    echo "[2521-setup]  Linking SSH config to Docker image..."
    if [[ ! -d "./config/ssh" ]]; then
        # -s = symbolic
        ln -s "$HOME/.ssh" "./config/ssh"
    else
        echo "./config/ssh already exists, skipping"
    fi
}

# Add 2521 scripts to PATH
add-scripts() {
    echo "[2521-setup]  Adding 2521 scripts to PATH variable..."
    # Only add if not already present
    scripts_path=$(which 2521-setup 2> /dev/null)
    if [[ -n $scripts_path ]]; then
        echo "[2521-setup]  Scripts already added to PATH variable, skipping"
        return
    fi
    scripts_dir="$PWD/scripts"
    # IMPORTANT: This comment is used to manage the uninstall process
    # so any changes to it may break the uninstall script
    comment='# 2521 Docker Scripts'
    path_mod=$(printf "%s\\\\nexport PATH=\"\$PATH:%q\"\n" "$comment" "$scripts_dir")
    # Append to bashrc and zshrc, only if bash/zsh are installed
    bash_path=$(which bash 2> /dev/null)
    if [[ -n $bash_path ]]; then
        echo -e $path_mod >> ~/.bashrc
    fi
    zsh_path=$(which zsh 2> /dev/null)
    if [[ -n $zsh_path ]]; then
        echo -e $path_mod >> ~/.zshrc
    fi
}

# Set up required directories
work-setup() {
    echo "[2521-setup]  Setting up working directories"
    mkdir -p home
    mkdir -p config
    # Copy across any important files
    # Course bash config
    cp "./dotfiles/dot.bashrc" "./home/.bashrc"
    # Profile config (ensure bashrc executed on login)
    cp "./dotfiles/dot.profile" "./home/.profile"
}


main() {
    # cd to repo root folder (so that all the setup works correctly)
    cd "$(dirname "$0")/.."

    echo " --- COMP2521 Docker Image setup ---"

    # Set up work directory
    work-setup

    # Check environment is ok
    check-env

    # Add scripts to PATH
    add-scripts

    # Set up connection to CSE
    cse-setup

    # Set up docker image
    docker-setup

    # Set up VS Code
    code-setup

    echo "[2521-setup]  Setup completed successfully!"
    echo "[2521-setup]  Restart your terminal to get the 2521-* commands"
}

main
