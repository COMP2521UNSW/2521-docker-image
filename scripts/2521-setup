#!/bin/bash
# Docker setup script
#
# This sets up the 2521 docker image, and sets up an SSH connection to CSE
# as well as adding the scripts in this directory to the user's $PATH, by
# appending to their .zshrc and .bashrc
#
# Author: Maddy Guthridge

# Echo to stderr
echoerr() { echo "$@" 1>&2; }


# Ensure environment contains required programs, and exit early if not
check-env() {
    # Docker
    if ! command -v docker > /dev/null; then
        echoerr "Error: Docker is not installed"
        echoerr "Please install Docker Desktop by following the instrctions"
        echoerr "on this site: https://docs.docker.com/get-docker/"
        exit 1
    fi

    # TODO: Make sure this user is in the docker group, so that they can run
    # docker commands without sudo on Linux
    # TODO: Is this needed on MacOS?
}


# Build docker image
docker-setup() {
    echoerr "Building docker image. This may take a few minutes..."
    # Export group ID and user ID so that volumes can be attached properly
    export UID GID
    docker compose up --build --no-start
}

# On Windows, the SSH agent isn't started in Git Bash by default, meaning that
# Docker builds don't seem to work properly.
# Append `fix-ssh-agent` to the .bashrc if there is no SSH agent already
windows-fix-ssh-agent() {
    # Only Windows
    if [[ "$OSTYPE" == "msys" ]]; then
        if [[ -z "${SSH_AUTH_SOCK}" ]]; then
            # SSH auth socket not set up
            # Copy extras/fix-ssh-agent into bashrc
            cat ./extras/fix-ssh-agent >> ~/.bashrc
            echo "Fixed SSH agent set up, please restart your terminal"
            exit 1
        fi
    fi
}

# Check for an existing SSH key, if there isn't one, make one
ssh-key-setup() {
    available_keys="$(ls -l ~/.ssh/id_*.pub)"

    if [ ! -n available_keys ]; then
        echoerr "No SSH keys found, creating one..."

        # Generate SSH key
        # https://stackoverflow.com/a/43235320/6335363
        # -q = quiet
        # -t ed25519 = ed25519 key
        # -f "~/.ssh/id_ed25519" = key output file
        # -N "" = no password
        # -C "COMP2521 Docker -> CSE" = comment
        ssh-keygen -q -t ed25519 -f ~/.ssh/id_ed25519 -N ""
    fi
}

# Set up access to CSE systems over SSH
#
# - Set up zID
# - Set up SSH key
# - Uses ssh-copy-id to copy it to CSE systems
cse-setup () {
    windows-fix-ssh-agent

    # Get their zID, and save it to `config/zid`
    read -p "Enter your zID: " zid
    echo "$zid" > "./home/.zid"

    # Set up an SSH key if needed
    ssh-key-setup

    # Now copy it across to CSE
    ssh-copy-id "$zid@login.cse.unsw.edu.au"

    # Finally, link their SSH config to `config/ssh` so it can be used
    # within the docker image
    ln -s ~/.ssh ./config/ssh
}

# Add 2521 scripts to PATH
add-scripts() {
    # Only add if not already present
    if ! command -v 2521-setup > /dev/null; then
        echoerr "Scripts already added to PATH variable, skipping"
        return
    fi
    scripts_dir="$PWD/scripts"
    # IMPORTANT: This comment is used to manage the uninstall process
    # so any changes to it may break the uninstall script
    comment='# 2521 Docker Scripts'
    path_mod=$(printf "%s\\\\nexport PATH=\"\$PATH:%q\"\n" "$comment" "$scripts_dir")
    # Append to bashrc and zshrc, only if bash/zsh are installed
    bash_path=$(which bash 2> /dev/null)
    if [[ -n $bash_path ]]; then
        echo -e $path_mod >> ~/.bashrc
    fi
    zsh_path=$(which zsh 2> /dev/null)
    if [[ -n $zsh_path ]]; then
        echo -e $path_mod >> ~/.zshrc
    fi
}

# Set up required directories
work-setup() {
    mkdir -p home
    mkdir -p config
    # Copy across any important files
    # Course bash config
    cp -i "./dot.bashrc" "./home/.bashrc"
}


main() {
    # cd to repo root folder (so that all the setup works correctly)
    cd "$(dirname "$0")/.."

    # Set up work directory
    work-setup

    # Check environment is ok
    check-env

    # Add scripts to PATH
    add-scripts

    # Set up connection to CSE
    cse-setup

    # Set up docker image
    docker-setup
}

main
